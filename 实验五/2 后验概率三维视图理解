nx, ny = 50, 40
m1 = np.array([0,3])
m2 = np.array([3,2.5])
C1 = C2 = np.array([[2,1], [1,2]], np.float32)
P1 = P2 = 0.01

A = np.linalg.cholesky(C1)
U1 = np.random.randn(200,2)
X1 = U1 @ A.T + m1
U2 = np.random.randn(200,2)
X2 = U2 @ A.T + m2

fig, ax = plt.subplots(nrows=1,ncols=2,figsize=(10,5))
ax[0].scatter(X1[:,0], X1[:,1], c="r", s=4)
ax[0].scatter(X2[:,0], X2[:,1], c="b", s=4)
ax[0].set_xlim(-4, 8)
ax[0].set_ylim(-4, 8)

X_p, Y_p, Z_p = posteriorPlot(nx, ny, m1, C1, m2, C2, P1, P2)
X_1, Y_1, Z_1 = twoDGaussianPlot(nx, ny, m1, C1)
X_2, Y_2, Z_2 = twoDGaussianPlot(nx, ny, m2, C2)

ax[0].contour(X_1, Y_1, Z_1, 5)
ax[0].contour(X_2, Y_2, Z_2, 5)
ax[1].contour(X_p, Y_p, Z_p, 5)

plt.show()

fig = plt.figure(figsize=(6,6))
ax = fig.add_subplot(111, projection='3d')

# Plot a 3D surface
ax.plot_surface(X_p, Y_p, Z_p)
